<!DOCTYPE html>
<html lang="zh-cn"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title> 东山郎的博客</title>
<link type="text/css" rel="stylesheet" href="../MainPageFiles/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="../MainPageFiles/bundle-darkgreentrip.css">
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="../MainPageFiles/bundle-darkgreentrip-mobile.css">
<script async="" src="../MainPageFiles/analytics.js">
</script><script src=../MainPageFiles/jquery-2.js"></script>
<script type="text/javascript">var currentBlogApp = 'zfyouxi', cb_enable_mathjax=false;var isLogined=false;</script>
<script src=../MainPageFiles/blog-common.js" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" ><img id="blogLogo" src="../MainPageFiles/logo.gif" alt="返回主页"></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" >东山郎</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="../MainPage.html">博客园</a></li>
<li><a id="blog_nav_myhome" class="menu" href="../MainPage.html">首页</a></li>
<li></li>
<li><a id="blog_nav_contact" class="menu" rel="nofollow" href="../MainPage.html">联系</a></li>
<li><a id="blog_nav_rss" class="menu" href="../MainPage.html">留白</a>

</li>
<li><a id="blog_nav_admin" class="menu" rel="nofollow" href="../MainPage.htm">留白</a></li>
</ul>
		<div class="blogStats">
			

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->


<div class="entrylist">
	
	<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2">muduo架构解析</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body"><div id="article_content" class="article_content">		
			
			
			
			
		       	<article>
		<div id="article_content" class="article_content">
			

<p>分为几个模块 EventLoop、TcpServer、Acceptor、TcpConnection、Channel等</p>

		<h2 class="postTitle">
		<font color="green">
			1.对于EventLoop来说
			</font>
		</h2>
<p>他仅仅关注里面的主驱动力，EventLoop中仅仅关注poll,这类系统调用使得其成为Reactor模式，EventLoop中有属于这个loop的全部Channel，这个loop属于哪一个Server.</p>

		<h2 class="postTitle">
		<font color="green">
			2.几个类存在的意义
			</font>
		</h2>

<p>从应用层使用的角度来看。用户须要初始化一个EventLoop。然后初始化一个TcpServer(当然也能够自己定义个TcpServer，自
己定义数据处理函数须要注冊到TcpServer内),然后调用TcpServer的start函数，然后调用EventLoop的loop()函数。</p><p>整个用户层的使用流程就是这种。</p>

		<h2 class="postTitle">
		<font color="green">
			3.从用户层的应用方法来解析Muduo库的设计思想
			</font>
		</h2>
		<h3 class="postTitle">
		<font color="green">
			3.1TcpServer类
			</font>
		</h3>
<p>首先来看TcpServer这个类，从名字来看。他是一个server，里面肯定须要有一个用于监听某个地址的套接字，这个是Acceptor类，
这是由TcpServer引出的第一个类。在Acceptor类中封装了监听套接字，Acceptor负责了一个socketfd,这个socketfd
就是一个监听套接字。</p><p>当这个套接字上有可读事件时，调用了Acceptor的handleRead函数，此函数的内部就是accept()
系统调用了。函数返回产生了一个连接套接字，紧接着就是调用Acceptor中的回调函数newConnectionCallback_，那么这个回调是
谁注冊的呢？肯定是谁拥有Acceptor谁就负责初始化Acceptor中的newConnectionCallback_回调喽！那么就是
TcpServer负责注冊！在进行TcpServer初始化时调用Acceptor中的setNewConnectionCallback()函数将
newConnection赋值给newConnectionCallback_。也就是说，在Acceptor中一旦accept()系统调用成功返回
就立刻调用newConnection函数。</p>
<p>到眼下为止，遗留下了下面几个问题：</p>
<p>1、&nbsp; Acceptor中的handleRead()函数是什么时候被调用的！</p>
<p>2、&nbsp; newConnecion虽说属于TcpServer，可是newConnection函数的作用是创建了一个类！这个类的作用也是举足轻重!</p>

		<h3 class="postTitle">
		<font color="green">
			3.2接下来介绍下由TcpServer引出的Acceptor类
			</font>
		</h3>

<p>首先这个类是属于内部类。既然这个类是管理监听套接字的，那么这个监听套接字的生命周期就是由Acceptor类来管理。</p>
<p>这个套接字在Acceptor就是Socket。同时也有一个EventLoop指针，表明这个Acceptor属于某一个EventLoop（由于Acceptor依赖于某一个TcpSever,同时TcpServer和EventLoop是有依赖关系的）。</p>
<p>同时另一个newConnectionCallback_函数。这个函数是在TcpServer初始化的时候被赋值的。Listening_表示当前这
个监听套接字的状态，idleFd_是一个输出错误的描写叙述符。这里另一个新的类—Channel！这个类在整个库中起着桥接的作用。整个这个类将有些
东西单独提取。使得其他各个类的功能更加单一，关于这个类的介绍不在这里，毕竟Acceptor类是一个内部类，假设这个一个庞大的类由内部类引出，显得
不够重视。这里临时雪藏Channel类。</p>
<p>关于Acceptor类的接口。仅仅有非常少的三个：</p>
<p>当中一个是setNewConnectionCallback，因为Acceptor类属于TcpServer类，所以调用该函数的肯定是属于
Acceptor的所有者，也就是TcpServer类，这个函数在TcpServer的构造函数中被调用，将
newConnectionCallback_函数赋值为newConnection。已经说过了，有点啰嗦了！</p><p>另外一个就是listen()函数。从感觉上来看，这个是使得Acceptor类中的acceptSocket_处于监听状态的函数。临时记住这个函数。尤其是这个函数中的最后一句，这事欠下的有待解决的问题。</p>
<p>&nbsp;</p>
<p>有待解决的问题：</p>
<p>1、&nbsp; 在Acceptor中的listen()函数中。属于Channel类中的enableReading()是干什么的？</p>
<p>2、&nbsp; Acceptor的listen()何时被调用！</p><p></p>
<p>到此须要记住的几点：</p>
<p>监听套接字是单独的类Acceptor，是脱离TcpServer类存在的一个类！</p>
<p>同时TcpServer类中不包括任何一个套接字（不管是监听套接字还是连接套接字。监听套接字属于Acceptor,连接套接字在以下一个类的介绍）。</p><p></p>
<p>TcpServer类中是没有监听套接字的。可是他负责注冊监听套接字上接受到一个连接后的响应操作（也就是TcpServer::newConnection。关于这个函数在介绍完EventLoop这个大块头再来介绍，不然衔接不上！）</p>
<p>至此我们大概介绍完了由TcpServer引出的第一个类Acceptor!</p>

		<h3 class="postTitle">
		<font color="green">
			3.3TcpConnection类
			</font>
		</h3>

<p>继续来看TcpServer类，发现里面有几个函数回调。 
connectionCallback_、messageCallback_、writeCompleteCallback_函数，这几个函数临时留着以
下解释.在这里有一个Map类型的变量connection_。既然是一个server，那么肯定保留着在这个server上的全部连接。这个连接的结合
就是connecions_。</p><p>跟踪到最后，这个变量保存的变量就是TcpConnection,由此也就引出了另外一个重要的类
TcpConnecion!事实上TcpServer中并没有直接托管全部的client连接，map仅仅是保留了指向每个连接的指针，所以全部
TcpConnection所属权并不在TcpServer!</p>

<p>从名字上来看，TcpConneciton类是管理着一个连接到server上的一个连接，不错，每个TcpConnectin管理着一个连接套接
字。这个连接套接字就是Acceptor调用accept()系统调用后创建个那个套接字，可是这两者是怎么联系的呢？到眼下为止还没见到server监
听，怎么就開始扯到创建连接这个地步呢？</p>
<p>还记得刚開始muduo库用法么？记得TcpServer注冊到Acceptor中的newConnectionCallback_函数么？</p>
<p>在应用层代码中调用了TcpServer中的start()函数。这个函数就是的Acceptor处于监听状态（注意这里还遗留了一个问题，既然这
里muudo是一个I/O复用的库，怎么没看到调用epoll这类函数就開始监听了呢？（事实上在Acceptor类中的listen()函数的最后一句
就是将监听套接字放置到epoll管理的文件描写叙述符内），事实上是Acceptor中的listen()函数中的最后一句话，下文解释！），使得监听套接字处于监听状态以后，就能够接受外部链接了。那么接受函数accept()是在Acceptor中的handleRead()函数中调用的。那么这里就又要遗留一个问题了。handleRead()是在哪里调用的呢?</p><p>临
时无论遗留的几个问题，咱们仅仅知道TcpServer中的start()函数使得管理监听套接字的Acceptor类中的监听套接字处于监听状
态，Acceptor中的handleRead()函数被触发以后调用accept()系统调用来接受一个新的连接，同时调用了TcpServer注
冊的回调函数newConnection,正是这个函数将TcpConneciotn类拉上了舞台！</p>

		<h3 class="postTitle">
		<font color="green">
			3.3.1分析newConnection引发的一系列操作
			</font>
		</h3>

<p>当server中的Acceptor接受到一个连接，就调用了这个函数。在这个函数内创建了一个TcpConnection类，并且从
threadPool(EventLoopThreadPool)中选择一个EveentLoop，将这个新的连接交付给这个EventLoop。（这句话的两个新词很重要。正是这个构建了muduo
的per reactor per 
thread的框架。首先从线程池内选择一个EventLoop。将这个连接委托给这个EveentLoop，并且我们知道一个EventLoop就是一
个Reactor，这就是所谓的main Reactor和sub
 
Reactor的思想！假设这里没有创建threadPool_。那么我们就仅仅有一个EventLoop。并且这个EventLoop是就是用户空间定
义的那个EventLoop，假设用户代码设置了创建threadPool,也就是创建了多个sub 
Reactor的话，这里就能够选择一个EventLoop了！）同时这个函数还进行了几个设置。调用的函数都是set*系列，那么这些函数參数都是
从哪里来的呢？非常明显，newConneciton属于TcpServer,函数參数自然就是TcpServer的变量喽，在上面也提到了
TcpServer中存在的几个函数定义（connectionCallback_、messageCallback_、
writeCompleteCallback_）,那么这些函数定义是从哪里来呢？看谁在使用TcpServer,这么说来就是用户了。用户使用了
TcpServer,那么用户就必须负责给TcpServer中的这个几个变量进行赋值。这么一说，从用户层定义的这几个函数赋值给了
TcpServer，然后在渗透到TcpConnection中！我们假设系统仅仅有一个Reactor,也就是仅仅有一个EventLoop。这
newConneciton这个函数中set系列的函数仅仅是赋值，可是最后一行是执行，由于仅仅有一个EventLoop，所以我们觉得那句话就是直接
执行TcpConnection::connectEstable函数。（在这个函数中我们好像见到了在Acceptor类中的listen()函数也见
到的一个调用enableReading(),好熟悉，可是隐约感觉到了他的伟大。）然后就是调用connectionCallback_函数，记住这个
函数是在用户层定义通过TcpServer渗透过来的！这么一来，在这里使用了用户层的代码。分析了引出TcpConneciton这个类的
newConneciton函数，来看看这个类。</p>

		<h2 class="postTitle">
		<font color="green">
			3.4小结，引出Channel类
			</font>
		</h2>
<p>回过头来看，TcpServer引出的Accpetor管理着监听套接字，解析TcpServer::newConnection函数引出的
TcpConnection类管理着连接套接字。而在TcpServer仅仅须要管理着一个Acceptor（如果一个server仅仅管理一个监听套接
字）再管理一个TcpConnection的指针集合集合（Connectionmap）!在TcpConnection类中还是有一个
EventLoop指针（眼下为止介绍的三个类都存在了这么一个定义），在管理套接字的类（Acceptor类和TcpConnection类）中还有一个重要的类-Channel。Channel和EventLoop都是重量级的类！</p><p></p>
<p><span style="color:red;background-color:yellow;">TcpConnection</span>类中没有什么特别的东西。仅仅是<span style="color:red;background-color:yellow;">管理了一个连接套接字和几个回调</span>（并且这几个回调都是从用户层传递给TcpServer
然后再渗透到这里的），可是里面有几个非常重要的函数，连接套接字上可读、可写、可关闭、可错误处理，还记得Acceptor的接受是在
哪个函数中完成的么？在Acceptor内的handleRead()函数，在TcpConnection类中有handlRead()、
handleWrite()、handleClose()函数，我们非常清楚仅仅要是套接字上，肯定是须要交互的，肯定是有可读可写发生的。从上面的分
析，我们恍惚感觉到了是管理套接字（监听&amp;连接）的类的handleRead
 
handleWrite系列函数完毕了套接字上的读写操作。那么这些函数是什么时候在哪里被激发的呢？这里我们须要引入Channel类了，由
Accetor和TcpConnection类一起来引入这个Channel类！</p>
<p>也就是说。管理套接字的类中都会有一个Channel类。在之前说过Channel是有一个桥接作用的，那么他桥接的是什么呢？（冥冥之中我们应该
有一定意识，由于到眼下为止，仍然没有介绍muduo中的Reactor驱动器。还没有牵连到I/O复用的操作），在这之前，我们先来看看Channel
类的内容！</p>
		<h2 class="postTitle">
		<font color="green">
			3.4.1Channel类
			</font>
		</h2>
<p>这个类中的内容很工整，所说Channel不能拥有套接字，可是在创建这个类的时候都传递了这个套接字！</p><p>既然Acceptor和
TcpConnection类中都使用了Channel类，那么我们就挑选TcpConneciton来分析怎么使用Channel类的，在
TcpConnection的构造函数中，使用了Channe类的set*系列函数进行赋值，将TcpConnection中的handleRead 
hadleWite handleClose 
handleError（要知道在这些函数中调用了从用户层传递给TcpServer而且渗透到TcpConnection中的
messageCallback_
 writeCompleteCallback_函数）函数赋值给了Channel中的readCallback_writeCallback_ 
closeCallback_。</p>
<p>同时我们也看到了前面提到的感觉非常伟大的enableReading()函数，在Acceptor中
的listen()函数中调用了Channel中的enableReding()函数，在TcpConnection中的
connectEstablished()函数也调用了这个函数，那么connectEstablished什么时候被调用了呢？能不能猜得到，应该在创
建一个新的连接的时候吧，也就是TcpServer::newConnection中被调用的。
</p>
<p>Channel的这个函数是干什么用的呢？尤其是最后的那个update()函数。还有和这个函数类似的enableWriteing()，我们跟
踪这个函数，这么一来，发现调用了EventLoop的updateChannel()函数。这么一来。我们就必须引入EventLoop这个大块头了？</p>
<p>在Channel中另一个函数就是handleEvent()函数。先来解释这个。我们发如今这个函数中最后调用了Channel中的
readCallback_ writeCallback_ 
errorCallback_等这些函数，但是这些函数是在哪里注冊的呢？是拥有Channel的类中的进行注冊的！那么就是TcpConnection
和Acceptor，后者将内部的handleRead handleWrite 
handleClose（当然这里但是有从用户渗透过来的消息处理函数的）这些函数注冊到Channel中的readCallback_
 writeCallback_ 
errorCallback。这么一来。我们已经知道消息处理的函数调用是在Channel的handlEvent函数中被调用的。当某个套接字上有事件
发生时。我们仅仅须要调用和这个套接字绑定的Channel类的handleEvent函数就可以！到此为止，我们明确了事件的处理流程，以及用户的消息
处理是怎样被传递的，如今唯一的关键就是Channel中的handleEvent何时被调用！</p>
<p></p>
		<h2 class="postTitle">
		<font color="green">
			3.5EventLoop类
			</font>
		</h2>
<p>事已至此。我们也不得不引入EventLoop类了，这个类是有Channel的update引入的。我们已经明确EvenLoop就是一个
Reactor,就是一个驱动器，我们是不是感觉到Channel是套接字和EvenTLoop之间的桥梁。是连接套接字和驱动器的桥梁。可是我们知道一
个Channel中有一个套接字，可是这个Channel不拥有套接字，他是不接管套接字的生命周期的！他们之间仅仅是绑定，套接字的拥有者是
Acceptor和TcpConnection。</p>

		<h3 class="postTitle">
		<font color="green">
			3.5.1EventLop简介
			</font>
		</h3>

<p>我们已经猜想到这是一个Reactor。那么他肯定有一个I/O复用，就是一个驱动器，就是变量poller_。那么poller_须要知道他所要
关注的全部套接字，那么poller_怎么知道呢，就是通过Channel中的enableReading()调用update()函数。调用
EventLoop的updateChannel来实现的。</p>
<p>因为每一个套接字和一个Channel相关联。所以EventLoop仅仅须要
管理全部须要关注的套接字相关的Channel就可以。所以这里有一个ChannelList,EventLoop仅仅须要关注有事件的套接字，在
Poller_返回后将有事件发生的套接字作为一个集合，activeChannels_就是被激活的套机字所在的Channel组成的结合！还记得刚開
始介绍mudo库用法的时候介绍的调用EvengLoop的loop()函数么？在这个函数中，首先调用I/O复用。等待着有激活事件的发生，将全部的
被激活的事件存放到activeChannels中。然后调用每一个Channel的handleEvent函数（还记得这个函数的威力么，在这个函数
内，来辨别这个套接字上的可读可写事件，然后调用readCallback_
writeCallback_closeCallback_等一系列的函数，这些函数是Acceptor和TcpConnection中的
handleReadhandleWrite 
handleClose函数，而这些函数中调用了用户层定义的通过TcpServer传递渗透到TcpConnection中的消息处理函数）
</p>
<p>走到这里，事实上我们是为了超找loop-&gt;updataChannel这个函数而来的，不觉间已经走偏了！这个函数中调用了
poller_-&gt;updateChannel()函数。到了这里，我们就不再深究了，我明白的告诉你。这个
poller_-&gt;updateChannel()函数就是更新了I/O复用的关注的事件集合！</p>
		<h1 class="postTitle">
		<font color="green">
			4总结
			</font>
		</h1>
<p>我们已经大概把muduo库的但Reactor模式的工作流程已经介绍完了！以下再梳理下各个类的作用：</p>
		<h2 class="postTitle">
		<font color="green">
			4.1 TcpServer类
			</font>
		</h2>

<p>1、里面没有一个套接字，而是由一个管理监听套接字的类Acceptor来管理，里面仅仅有这么一个套接字。</p><p></p>
<p>2、他不管理连接套接字，仅仅有一个map管理指向连接套接字的指针。同时这个server须要用户层的消息处理函数的注冊（通过
TcpServer穿过TcpConnection,然后经过TcpConnection的handleRead handleWrite 
handleClose等一系列的函数注冊到Channel的readCallbackwriteCallback，而Channel中的
handleEvent允许接管Channel的readCallback writeCallback）</p>
<p>3、一旦接受到一个client的连接，就会调用TcpServer中的newConnection函数。</p>
<p>4、start()函数使得Acceptor类管理的监听套接字处于监听状态。</p>
		<h2 class="postTitle">
		<font color="green">
			4.2Acceptor类
			</font>
		</h2>

<p>1、&nbsp; 这个类中管理着一个监听套接字，在被TcpServer初始化的时候设置newConnection回调函数。后者是创建一个连接套接字属于的类(TcpConnection)</p>
<p>2、&nbsp; Listen被TcpServer中的start函数调用，最后的enablereading()使得监听套接字加入到epoll中。</p><p></p>
<p>3、&nbsp; 
监听套接字上可读，那么监听套接字相应的Channel调用handleEvent来处理。就调用了Acceptor中的handleRead函数，内部
使用了TcpServer注冊给他的newConnection来创建一个新的client连接！在newConnection中选择一个合适的
EveentLoop将这个套接字进行托管！</p>
		<h2 class="postTitle">
		<font color="green">
			4.3 TcpConnection类
			</font>
		</h2>
<p>1、表示一个新的连接。定义了Channel须要的handleReadhandleWrite handleClose等函数</p>
<p>属于一个内部的类，所以对外的接口没有！</p>
		<h2 class="postTitle">
		<font color="green">
			4.4 EventLoop类
			</font>
		</h2>

<p>1、&nbsp; 驱动器。关于被激活的事件！</p>
<p>成员变量poller_包括着这个驱动器需要关注的全部套接字。这个套接字是怎么被加
入的呢？对于Acceptor来说。在Listen()函数中，调用了Channel-&gt;enablereading()，然后调用了
eventLoop的updateChannel函数！</p>
<p></p>
<p>2、&nbsp; 对于连接套接字，在newConnection中的connectEstablished函数中完毕加入！</p>

		<h2 class="postTitle">
		<font color="green">
			4.4 总结
			</font>
		</h2>
<p>到这里为止，我们是在接受单个Reactor的流程。这并不muduo的真意。他的思想是：</p>
<p>有一个main reactor，这个main reactor仅仅管接受新的连接，一旦创建好新的连接，就从EventloopThreadPool中选择一个合适的EventLoop来托管这个连接套接字。这个EventLoop就是一个sub reactor。</p><p></p>

<p >



<span style="color:red;background-color:yellow;">

这种模式的用法和流程如下：

</span>

</p>

<p>EvenLoop内部的WakeupFd_是供线程内部使用的套接字，不是用来通信的！由于这里线程间也不是必需通信！（个人理解）</p>
<p>我认为正是pendingFunctors_和wakeupFd_使得非常多个Reactor处理非常easy。</p>
<p>比方在main&nbsp; reactor中接收到一个新的连接，那么就是在Acceptor中的handleRead函数中的accept结束后调用了
newConnection，在这个函数中从EventLoopThreadPoll中选择一个EventLoop,让这个子reactor执行接下来的
任务（就是connectionEstablished来将这个连接套接字加入到sub 
reactor中，那么就是调用了EventLoop的runInLoop函数，此函数最后调用了queueInLoop函数，queueInLoop函
数将函数加入到pendingFunctors_中，然后直接调用wakeup()来唤醒这个线程，为啥要唤醒呢？由于一旦唤醒，那么就是
EventLoop中的loop()）函数返回，在函数返回以后有一个专门处理pendingFunctors_集合的函数，那么什么时候须要唤醒呢？假
设调用runInLoop函数的线程和runInLoop所在的EvenLoop所属的线程不是同一个（要明确TcpSercver中的
EventLoopThredPool,使得每个线程都拥有一个EventLoop）或前的EventLoop正在处理pendingFunctors_
中的函数。</p>
<p>那么这样的事情什么时候发生呢？我们明确TcpServer中肯定拥有一个EventLoop，由于在用户层定义了一个
EventLoop，TcpServer绑定到这个EventLoop上。假设用户使用了TcpServer中的
EventLoopThreadPool，那么每一个线程中包括了一个EventLoop。还记得main 
Reactor负责接收新的连接吧。TcpServer中的Acceptor调用了accept后直接回调了TcpServer中的
newConnection,在最后选择了一个ioLoop作为托管新连接的EventLoop。然后调用了
ioLoop-&gt;runInLoop(),那么这个时候就须要唤醒了。由于调用runInLoop的线程和runInloop所在线程不是同一个。
那么将个调用（也就是connectEstablished）加入到pendingFunctors_中，然后唤醒本线程，使得
pendingFunctors_内的connectEstablished能够被调用！
</p>
				
</article>
 
</div></div>
<div id="MySignature"></div>
<div class="clear"></div>



		</div>
	</div>
	<script type="text/javascript">var allowComments=true,cb_blogId=187416,cb_entryId=5413442,cb_blogApp=currentBlogApp,cb_blogUserGuid='1cc61568-c8e6-e311-8d02-90b11c0b17d6',cb_entryCreatedDate='2016/4/20 16:57:00';loadViewCount(cb_entryId);var cb_postType=1;</script>
	
</div><!--end: topics 文章、评论容器-->
	
	
	<p>
	
	</p>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div id="blog-calendar" style="">
<table id="blogCalendar" class="Cal" title="Calendar" cellspacing="0" cellpadding="0">
	<tbody><tr>
	<td colspan="7">
		<div id="show_time">  
<script>  
//这里代码多了几行，但是不会延迟显示，速度比较好，格式可以自定义，是理想的时间显示
setInterval("fun(show_time)",1);
function fun(timeID){ 
var date = new Date();  //创建对象  
var y = date.getFullYear();     //获取年份  
var m =date.getMonth()+1;   //获取月份  返回0-11  
var d = date.getDate(); // 获取日  
var w = date.getDay();   //获取星期几  返回0-6   (0=星期天) 
var ww = ' 星期'+'日一二三四五六'.charAt(new Date().getDay()) ;//星期几
var h = date.getHours();  //时
var minute = date.getMinutes()  //分
var s = date.getSeconds(); //秒
var sss = date.getMilliseconds() ; //毫秒
if(m<10){
m = "0"+m;
}
if(d<10){
d = "0"+d;
}
if(h<10){
h = "0"+h;
}
 
if(minute<10){
minute = "0"+minute;
}
 
if(s<10){
s = "0"+s;
}
 
if(sss<10){
sss = "00"+sss;
}else if(sss<100){
sss = "0"+sss;
}
document.getElementById(timeID.id).innerHTML =  y+"-"+m+"-"+d+"   "+h+":"+minute+":"+s+ww;
  }
</script>  
</div>
</table>
</div>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"><div id="sidebar_search" class="sidebar-block"></div><div id="sidebar_categories">
<div id="sidebar_postarchive" class="catListPostArchive sidebar-block">
<h3 class="catListTitle">随笔档案</h3>

<ul>

<li><a id="CatList_LinkList_0_Link_0" href="./muduo架构解析.html">muduo架构解析</a> </li>



</ul>

</div>

</div>


<div id="sidebar_topviewedposts" class="sidebar-block">

</div>
<script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div>
		<!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2018 dongshanlang
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->



</body></html>